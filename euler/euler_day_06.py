"""
Euler challenge from HackerRank https://www.hackerrank.com/contests/projecteuler/challenges/euler254/problem

Speed, speed, ... improvement - Day 4

"""

import cProfile, pstats, io
import contextlib
import math
import time
from collections import defaultdict, namedtuple
from functools import reduce
from itertools import combinations

DEBUG = False
F9 = 362880
sg_cache = {}
sg_mod_cache = {}
PREFIX = {221439: '1233455566666677788888', 71679: '1233455567777778', 95359: '13444556666667788', 308479: '13444556777778888888', 332159: '12233344445666666788888888', 182399: '12233344445677778888', 206079: '12334566666688888', 56319: '12334567778', 79999: '1344466666677777778', 293119: '134446778888888', 316799: '122333444455555666667777778888888', 167039: '12233344445555578888', 190719: '123345555566666777778888', 144639: '123345555566667777888', 18559: '1344455556666777', 335359: '1344455556667788888888', 209279: '1223334444555666788888', 163199: '1223334444555668888', 37119: '12334555667777777', 353919: '12334555677777788888888', 227839: '134445567777788888', 181759: '134445577778888', 55679: '122333444457778', 9599: '122333444456666667', 246399: '123345666666888888', 200319: '1233456666677777778888', 74239: '13444666667777778', 28159: '13444666677777', 264959: '1223334444555556667777888888', 218879: '1223334444555556677788888', 92799: '1233455555667788', 357759: '123345555566666677777788888888', 185599: '1344455556666677778888', 87679: '13444555566788', 278399: '122333444455567777777888888', 180479: '1223334444555666667778888', 8319: '1233455566667', 273279: '123345556777777888888', 101119: '1344455777788', 3199: '13444556666', 193919: '122333444456667777778888', 95999: '1223334444577788', 286719: '1233456666668888888', 188799: '123345666777778888', 16639: '1344466777', 281599: '134446666667777777888888', 109439: '12233344445555566667777788', 11519: '122333444455555677', 202239: '123345555588888', 311679: '123345555566666777778888888', 41599: '13444555568', 151039: '13444555566666677777888', 243839: '122333444455566888888', 353279: '122333444455577777788888888', 83199: '1233455566688', 192639: '1233455567777778888', 285439: '134445566668888888', 31999: '134445566777777', 124799: '1223334444566666888', 234239: '1223334444566677777788888', 327039: '12334566666688888888', 73599: '12334566667777778', 166399: '1344478888', 275839: '1344466666777777888888', 5759: '1223334444555557', 115199: '1223334444555556666677777788', 207999: '12334555556788888', 213759: '1233455555667788888', 53119: '134445555666778', 58879: '13444555566667778', 261119: '122333444455566666777888888', 266879: '12233344445556666667777888888', 106239: '123345557777788', 111999: '12334555677777788', 314239: '1344455667777778888888', 319999: '134445566677777778888888', 159359: '1223334444566667777777888', 165119: '12233344445666668888', 4479: '123345666666', 10239: '12334577', 212479: '1344467788888', 218239: '134446677788888', 57599: '122333444455555667778', 63359: '12233344445555566677778', 265599: '123345555566667777888888', 323199: '123345555588888888', 168319: '1344455556678888', 225919: '13444555566666777788888', 71039: '12233344445557777778', 128639: '12233344445556667888', 336639: '12334555666667788888888', 31359: '123345556777777', 239359: '1344455666777777788888', 296959: '1344455666666778888888', 142079: '1223334444567777888', 199679: '12233344445666677777778888', 44799: '1233456666668', 102399: '12334566777788', 310399: '134446666777778888888', 5119: '134447', 213119: '12233344445555567788888', 270719: '122333444455555666677777888888', 115839: '123345555566666677777788', 328959: '12334555556788888888', 231679: '1344455556666667777788888', 81919: '134445555688', 347519: '1223334444555666666777788888888', 197759: '1223334444555677777778888', 100479: '1233455566666677788', 313599: '1233455567777778888888', 216319: '13444556666667788888', 66559: '13444556777778', 85119: '12334566666688', 298239: '12334567778888888', 200959: '1344466666677777778888', 51199: '134446778', 69759: '123345555566666777778', 23679: '123345555566667777', 139519: '1344455556666777888', 93439: '1344455556667788', 279039: '12334555667777777888888', 232959: '12334555677777788888', 348799: '134445567777788888888', 302719: '134445577778888888', 125439: '123345666666888', 79359: '1233456666677777778', 195199: '13444666667777778888', 149119: '13444666677777888', 334719: '1233455555667788888888', 236799: '123345555566666677777788888', 306559: '1344455556666677778888888', 208639: '13444555566788888', 250239: '1233455566667888888', 152319: '123345556777777888', 222079: '1344455777788888', 124159: '13444556666888', 165759: '1233456666668888', 67839: '123345666777778', 137599: '1344466777888', 39679: '134446666667777777', 81279: '123345555588', 162559: '13444555568888', 271999: '13444555566666677777888888', 325119: '1233455566688888888', 43519: '134445566668', 152959: '134445566777777888', 315519: '12334566667777778888888', 287359: '1344478888888', 33919: '1344466666777777', 87039: '12334555556788', 174079: '134445555666778888', 179839: '13444555566667778888', 348159: '123345557777788888888', 72319: '1344455667777778', 78079: '134445566677777778', 252159: '12334577888888', 333439: '1344467788888888', 339199: '134446677788888888', 289279: '1344455556678888888', 346879: '13444555566666777788888888', 215679: '12334555666667788888', 360319: '1344455666777777788888888', 55039: '1344455666666778', 344319: '12334566777788888888', 68479: '134446666777778', 126079: '134447888', 352639: '1344455556666667777788888888', 202879: '134445555688888', 342399: '1233455566666677788888888', 337279: '13444556666667788888888', 187519: '13444556777778888', 177279: '12334567778888', 321919: '1344466666677777778888888', 172159: '134446778888', 260479: '1344455556666777888888', 214399: '1344455556667788888', 158079: '12334555667777777888', 106879: '134445567777788', 60799: '134445577778', 321279: '1233456666677777778888888', 316159: '13444666667777778888888', 270079: '13444666677777888888', 64639: '1344455556666677778', 329599: '13444555566788888888', 129279: '1233455566667888', 343039: '1344455777788888888', 245119: '13444556666888888', 309759: '123345666777778888888', 258559: '1344466777888888', 160639: '134446666667777777888', 283519: '13444555568888888', 30079: '13444555566666677777', 204159: '1233455566688888', 164479: '134445566668888', 273919: '134445566777777888888', 194559: '12334566667777778888', 45439: '1344478', 154879: '1344466666777777888', 295039: '134445555666778888888', 300799: '13444555566667778888888', 227199: '123345557777788888', 193279: '1344455667777778888', 199039: '134445566677777778888', 131199: '12334577888', 91519: '1344467788', 97279: '134446677788', 47359: '1344455556678', 104959: '13444555566666777788', 94719: '12334555666667788', 118399: '1344455666777777788', 175999: '1344455666666778888', 223359: '12334566777788888', 189439: '134446666777778888', 247039: '134447888888', 110719: '1344455556666667777788', 323839: '134445555688888888'}
sum_param_table = [13778659611992945312499999999916, 16534391534391534374999999999916, 22045855379188712499999999999916, 30313051146384479687499999999916, 41335978835978835937499999999916, 55114638447971781249999999999916, 71649029982363315624999999999916, 90939153439153439062499999999916, 112985008818342151562499999999916, 137786596119929453124999999999916, 165343915343915343749999999999916, 220458553791887124999999999999916, 303130511463844796874999999999916, 413359788359788359374999999999916, 551146384479717812499999999999916, 716490299823633156249999999999916, 909391534391534390624999999999916, 1129850088183421515624999999999916, 1377865961199294531249999999999916, 1653439153439153437499999999999916, 2204585537918871249999999999999916, 3031305114638447968749999999999916, 4133597883597883593749999999999916, 5511463844797178124999999999999916, 7164902998236331562499999999999916, 9093915343915343906249999999999916, 11298500881834215156249999999999916, 13778659611992945312499999999999916, 16534391534391534374999999999999916, 22045855379188712499999999999999916, 30313051146384479687499999999999916, 41335978835978835937499999999999916, 55114638447971781249999999999999916, 71649029982363315624999999999999916, 90939153439153439062499999999999916, 112985008818342151562499999999999916, 137786596119929453124999999999999916, 165343915343915343749999999999999916, 220458553791887124999999999999999916, 303130511463844796874999999999999916, 413359788359788359374999999999999916, 551146384479717812499999999999999916, 716490299823633156249999999999999916, 909391534391534390624999999999999916, 1129850088183421515624999999999999916, 1377865961199294531249999999999999916, 1653439153439153437499999999999999916, 2204585537918871249999999999999999916, 3031305114638447968749999999999999916, 4133597883597883593749999999999999916, 5511463844797178124999999999999999916, 7164902998236331562499999999999999916, 9093915343915343906249999999999999916, 11298500881834215156249999999999999916, 13778659611992945312499999999999999916, 16534391534391534374999999999999999916, 22045855379188712499999999999999999916, 30313051146384479687499999999999999916, 41335978835978835937499999999999999916, 55114638447971781249999999999999999916, 71649029982363315624999999999999999916, 90939153439153439062499999999999999916, 112985008818342151562499999999999999916, 137786596119929453124999999999999999916, 165343915343915343749999999999999999916, 220458553791887124999999999999999999916, 303130511463844796874999999999999999916, 413359788359788359374999999999999999916, 551146384479717812499999999999999999916, 716490299823633156249999999999999999916, 909391534391534390624999999999999999916, 1129850088183421515624999999999999999916, 1377865961199294531249999999999999999916, 1653439153439153437499999999999999999916, 2204585537918871249999999999999999999916, 3031305114638447968749999999999999999916, 4133597883597883593749999999999999999916, 5511463844797178124999999999999999999916, 7164902998236331562499999999999999999916, 9093915343915343906249999999999999999916, 11298500881834215156249999999999999999916, 13778659611992945312499999999999999999916, 16534391534391534374999999999999999999916, 22045855379188712499999999999999999999916, 30313051146384479687499999999999999999916, 41335978835978835937499999999999999999916, 55114638447971781249999999999999999999916, 71649029982363315624999999999999999999916, 90939153439153439062499999999999999999916, 112985008818342151562499999999999999999916, 137786596119929453124999999999999999999916, 165343915343915343749999999999999999999916, 220458553791887124999999999999999999999916, 303130511463844796874999999999999999999916, 413359788359788359374999999999999999999916, 551146384479717812499999999999999999999916, 716490299823633156249999999999999999999916, 909391534391534390624999999999999999999916, 1129850088183421515624999999999999999999916, 1377865961199294531249999999999999999999916, 1653439153439153437499999999999999999999916, 2204585537918871249999999999999999999999916, 3031305114638447968749999999999999999999916, 4133597883597883593749999999999999999999916, 5511463844797178124999999999999999999999916, 7164902998236331562499999999999999999999916, 9093915343915343906249999999999999999999916, 11298500881834215156249999999999999999999916, 13778659611992945312499999999999999999999916, 16534391534391534374999999999999999999999916, 22045855379188712499999999999999999999999916, 30313051146384479687499999999999999999999916, 41335978835978835937499999999999999999999916, 55114638447971781249999999999999999999999916, 71649029982363315624999999999999999999999916, 90939153439153439062499999999999999999999916, 112985008818342151562499999999999999999999916, 137786596119929453124999999999999999999999916, 165343915343915343749999999999999999999999916, 220458553791887124999999999999999999999999916, 303130511463844796874999999999999999999999916, 413359788359788359374999999999999999999999916, 551146384479717812499999999999999999999999916, 716490299823633156249999999999999999999999916, 909391534391534390624999999999999999999999916, 1129850088183421515624999999999999999999999916, 1377865961199294531249999999999999999999999916, 1653439153439153437499999999999999999999999916, 2204585537918871249999999999999999999999999916, 3031305114638447968749999999999999999999999916, 4133597883597883593749999999999999999999999916, 5511463844797178124999999999999999999999999916, 7164902998236331562499999999999999999999999916, 9093915343915343906249999999999999999999999916, 11298500881834215156249999999999999999999999916, 13778659611992945312499999999999999999999999916, 16534391534391534374999999999999999999999999916, 22045855379188712499999999999999999999999999916, 30313051146384479687499999999999999999999999916, 41335978835978835937499999999999999999999999916, 55114638447971781249999999999999999999999999916, 71649029982363315624999999999999999999999999916, 90939153439153439062499999999999999999999999916, 112985008818342151562499999999999999999999999916, 137786596119929453124999999999999999999999999916, 165343915343915343749999999999999999999999999916, 220458553791887124999999999999999999999999999916, 303130511463844796874999999999999999999999999916, 413359788359788359374999999999999999999999999916, 551146384479717812499999999999999999999999999916, 716490299823633156249999999999999999999999999916, 909391534391534390624999999999999999999999999916, 1129850088183421515624999999999999999999999999916, 1377865961199294531249999999999999999999999999916, 1653439153439153437499999999999999999999999999916, 2204585537918871249999999999999999999999999999916, 3031305114638447968749999999999999999999999999916, 4133597883597883593749999999999999999999999999916, 5511463844797178124999999999999999999999999999916, 7164902998236331562499999999999999999999999999916, 9093915343915343906249999999999999999999999999916, 11298500881834215156249999999999999999999999999916]
SUM_A = 1000000000000000000
SUM_B = 83999999999999999916
FACTORIALS = [math.factorial(i) for i in range(10)]
sg_table = [1, 2, 5, 6, 7, 3, 4, 5, 6, 7, 8, 8, 9, 13, 9, 10, 11, 13, 14, 15, 16, 17, 18, 13, 14, 15, 9, 10, 11, 12, 13, 14, 12, 13, 14, 15, 19, 28, 24, 25, 37, 31, 32, 45, 46, 50, 66, 67, 71, 84, 89, 90, 114, 118, 134, 154, 158, 193, 231, 235, 247, 317, 321, 545, 843, 1052, 1339, 1574, 1846, 2035, 2294, 2566, 5035, 7578, 9997, 12529, 15009, 17415, 19912, 22416, 24933, 49686, 74498, 99334, 124135, 148899, 173672, 198536, 223324, 248145, 496173, 744212, 992162, 1240190, 1488229, 1736179, 1984255, 2232318, 2480268, 4960419, 7440581, 9920765, 12400916, 14881015, 17361186, 19841385, 22321571, 24801707, 49603317, 74404903, 99206450, 124008025, 148809646, 173611193, 198412768, 223214413, 248015925, 496031816, 744047718, 992063594, 1240079422, 1488095324, 1736111200, 1984127056, 2232142919, 2480158795, 4960317556, 7440476328, 9920635039, 12400793737, 14880952509, 17361111207, 19841269933, 22321428666, 24801587412, 49603174707, 74404761998, 99206349313, 124007936656, 148809523899, 173611111214, 198412698494, 223214285824, 248015873187, 496031746194, 744047619212, 992063492204, 1240079365211, 1488095238229, 1736111111221, 1984126984276, 2232142857318, 2480158730310, 4960317460440, 7440476190581, 9920634920744, 12400793650874, 14880952381015, 17361111111165, 19841269841406, 22321428571571, 24801587301686, 49603174603275, 74404761904903, 99206349206429, 124007936508046, 148809523809646, 173611111111172, 198412698412789, 223214285714413, 248015873015967, 496031746031837, 744047619047718, 992063492063573, 1240079365079443, 1488095238095324, 1736111111111179, 1984126984127014, 2232142857142919, 2480158730158837, 4960317460317577, 7440476190476328, 9920634920635018, 12400793650793758, 14880952380952509, 17361111111111186, 19841269841269891, 22321428571428666, 24801587301587391, 49603174603174665, 74404761904761998, 99206349206349292, 124007936507936614, 148809523809523899, 173611111111111193, 198412698412698515, 223214285714285824, 248015873015873166, 496031746031746152, 744047619047619212, 992063492063492183, 1240079365079365169, 1488095238095238229, 1736111111111111200, 1984126984126984234, 2232142857142857318, 2480158730158730289, 4960317460317460398, 7440476190476190581, 9920634920634920723, 12400793650793650895, 14880952380952381015, 17361111111111111207, 19841269841269841364, 22321428571428571571, 24801587301587301665, 49603174603174603296, 74404761904761904903, 99206349206349206408, 124007936507936508004, 148809523809523809646, 173611111111111111214, 198412698412698412747, 223214285714285714413, 248015873015873015946, 496031746031746031795, 744047619047619047718, 992063492063492063552, 1240079365079365079464, 1488095238095238095324, 1736111111111111111221, 1984126984126984127035, 2232142857142857142919, 2480158730158730158816, 4960317460317460317535, 7440476190476190476328, 9920634920634920634997, 12400793650793650793779, 14880952380952380952509, 17361111111111111111165, 19841269841269841269912, 22321428571428571428666, 24801587301587301587433, 49603174603174603174686, 74404761904761904761998, 99206349206349206349334, 124007936507936507936635, 148809523809523809523899, 173611111111111111111172, 198412698412698412698536, 223214285714285714285824, 248015873015873015873145, 496031746031746031746173, 744047619047619047619212, 992063492063492063492162, 1240079365079365079365190, 1488095238095238095238229, 1736111111111111111111179, 1984126984126984126984255, 2232142857142857142857318, 2480158730158730158730268, 4960317460317460317460419, 7440476190476190476190581, 9920634920634920634920765, 12400793650793650793650916, 14880952380952380952381015, 17361111111111111111111186, 19841269841269841269841385, 22321428571428571428571571, 24801587301587301587301707, 49603174603174603174603317, 74404761904761904761904903, 99206349206349206349206450, 124007936507936507936508025, 148809523809523809523809646, 173611111111111111111111193, 198412698412698412698412768, 223214285714285714285714413, 248015873015873015873015925, 496031746031746031746031816, 744047619047619047619047718, 992063492063492063492063594, 1240079365079365079365079422, 1488095238095238095238095324, 1736111111111111111111111200, 1984126984126984126984127056, 2232142857142857142857142919, 2480158730158730158730158795, 4960317460317460317460317556, 7440476190476190476190476328, 9920634920634920634920635039, 12400793650793650793650793737, 14880952380952380952380952509, 17361111111111111111111111207, 19841269841269841269841269933, 22321428571428571428571428666, 24801587301587301587301587412, 49603174603174603174603174707, 74404761904761904761904761998, 99206349206349206349206349313, 124007936507936507936507936656, 148809523809523809523809523899, 173611111111111111111111111214, 198412698412698412698412698494, 223214285714285714285714285824, 248015873015873015873015873187, 496031746031746031746031746194, 744047619047619047619047619212, 992063492063492063492063492204, 1240079365079365079365079365211, 1488095238095238095238095238229, 1736111111111111111111111111221, 1984126984126984126984126984276, 2232142857142857142857142857318, 2480158730158730158730158730310, 4960317460317460317460317460440, 7440476190476190476190476190581, 9920634920634920634920634920744, 12400793650793650793650793650874, 14880952380952380952380952381015, 17361111111111111111111111111165, 19841269841269841269841269841406, 22321428571428571428571428571571, 24801587301587301587301587301686, 49603174603174603174603174603275, 74404761904761904761904761904903, 99206349206349206349206349206429, 124007936507936507936507936508046, 148809523809523809523809523809646, 173611111111111111111111111111172, 198412698412698412698412698412789, 223214285714285714285714285714413, 248015873015873015873015873015967, 496031746031746031746031746031837, 744047619047619047619047619047718, 992063492063492063492063492063573, 1240079365079365079365079365079443, 1488095238095238095238095238095324, 1736111111111111111111111111111179, 1984126984126984126984126984127014, 2232142857142857142857142857142919, 2480158730158730158730158730158837, 4960317460317460317460317460317577, 7440476190476190476190476190476328, 9920634920634920634920634920635018, 12400793650793650793650793650793758, 14880952380952380952380952380952509, 17361111111111111111111111111111186, 19841269841269841269841269841269891, 22321428571428571428571428571428666, 24801587301587301587301587301587391, 49603174603174603174603174603174665, 74404761904761904761904761904761998, 99206349206349206349206349206349292, 124007936507936507936507936507936614, 148809523809523809523809523809523899, 173611111111111111111111111111111193, 198412698412698412698412698412698515, 223214285714285714285714285714285824, 248015873015873015873015873015873166, 496031746031746031746031746031746152, 744047619047619047619047619047619212, 992063492063492063492063492063492183, 1240079365079365079365079365079365169, 1488095238095238095238095238095238229, 1736111111111111111111111111111111200, 1984126984126984126984126984126984234, 2232142857142857142857142857142857318, 2480158730158730158730158730158730289, 4960317460317460317460317460317460398, 7440476190476190476190476190476190581, 9920634920634920634920634920634920723, 12400793650793650793650793650793650895, 14880952380952380952380952380952381015, 17361111111111111111111111111111111207, 19841269841269841269841269841269841364, 22321428571428571428571428571428571571, 24801587301587301587301587301587301665, 49603174603174603174603174603174603296, 74404761904761904761904761904761904903, 99206349206349206349206349206349206408, 124007936507936507936507936507936508004, 148809523809523809523809523809523809646, 173611111111111111111111111111111111214, 198412698412698412698412698412698412747, 223214285714285714285714285714285714413, 248015873015873015873015873015873015946, 496031746031746031746031746031746031795, 744047619047619047619047619047619047718, 992063492063492063492063492063492063552, 1240079365079365079365079365079365079464, 1488095238095238095238095238095238095324, 1736111111111111111111111111111111111221, 1984126984126984126984126984126984127035, 2232142857142857142857142857142857142919, 2480158730158730158730158730158730158816, 4960317460317460317460317460317460317535, 7440476190476190476190476190476190476328, 9920634920634920634920634920634920634997, 12400793650793650793650793650793650793779, 14880952380952380952380952380952380952509, 17361111111111111111111111111111111111165, 19841269841269841269841269841269841269912, 22321428571428571428571428571428571428666, 24801587301587301587301587301587301587433, 49603174603174603174603174603174603174686, 74404761904761904761904761904761904761998, 99206349206349206349206349206349206349334, 124007936507936507936507936507936507936635, 148809523809523809523809523809523809523899, 173611111111111111111111111111111111111172, 198412698412698412698412698412698412698536, 223214285714285714285714285714285714285824, 248015873015873015873015873015873015873145, 496031746031746031746031746031746031746173, 744047619047619047619047619047619047619212, 992063492063492063492063492063492063492162, 1240079365079365079365079365079365079365190, 1488095238095238095238095238095238095238229, 1736111111111111111111111111111111111111179, 1984126984126984126984126984126984126984255, 2232142857142857142857142857142857142857318, 2480158730158730158730158730158730158730268, 4960317460317460317460317460317460317460419, 7440476190476190476190476190476190476190581, 9920634920634920634920634920634920634920765, 12400793650793650793650793650793650793650916, 14880952380952380952380952380952380952381015, 17361111111111111111111111111111111111111186, 19841269841269841269841269841269841269841385, 22321428571428571428571428571428571428571571, 24801587301587301587301587301587301587301707, 49603174603174603174603174603174603174603317, 74404761904761904761904761904761904761904903, 99206349206349206349206349206349206349206450, 124007936507936507936507936507936507936508025, 148809523809523809523809523809523809523809646, 173611111111111111111111111111111111111111193, 198412698412698412698412698412698412698412768, 223214285714285714285714285714285714285714413, 248015873015873015873015873015873015873015925, 496031746031746031746031746031746031746031816, 744047619047619047619047619047619047619047718, 992063492063492063492063492063492063492063594, 1240079365079365079365079365079365079365079422, 1488095238095238095238095238095238095238095324, 1736111111111111111111111111111111111111111200, 1984126984126984126984126984126984126984127056, 2232142857142857142857142857142857142857142919, 2480158730158730158730158730158730158730158795, 4960317460317460317460317460317460317460317556, 7440476190476190476190476190476190476190476328, 9920634920634920634920634920634920634920635039, 12400793650793650793650793650793650793650793737, 14880952380952380952380952380952380952380952509, 17361111111111111111111111111111111111111111207, 19841269841269841269841269841269841269841269933, 22321428571428571428571428571428571428571428666, 24801587301587301587301587301587301587301587412, 49603174603174603174603174603174603174603174707, 74404761904761904761904761904761904761904761998, 99206349206349206349206349206349206349206349313, 124007936507936507936507936507936507936507936656, 148809523809523809523809523809523809523809523899, 173611111111111111111111111111111111111111111214, 198412698412698412698412698412698412698412698494, 223214285714285714285714285714285714285714285824, 248015873015873015873015873015873015873015873187, 496031746031746031746031746031746031746031746194, 744047619047619047619047619047619047619047619212, 992063492063492063492063492063492063492063492204, 1240079365079365079365079365079365079365079365211, 1488095238095238095238095238095238095238095238229, 1736111111111111111111111111111111111111111111221, 1984126984126984126984126984126984126984126984276, 2232142857142857142857142857142857142857142857318, 2480158730158730158730158730158730158730158730310, 4960317460317460317460317460317460317460317460440, 7440476190476190476190476190476190476190476190581, 9920634920634920634920634920634920634920634920744, 12400793650793650793650793650793650793650793650874, 14880952380952380952380952380952380952380952381015, 17361111111111111111111111111111111111111111111165, 19841269841269841269841269841269841269841269841406, 22321428571428571428571428571428571428571428571571, 24801587301587301587301587301587301587301587301686, 49603174603174603174603174603174603174603174603275, 74404761904761904761904761904761904761904761904903, 99206349206349206349206349206349206349206349206429, 124007936507936507936507936507936507936507936508046, 148809523809523809523809523809523809523809523809646, 173611111111111111111111111111111111111111111111172, 198412698412698412698412698412698412698412698412789, 223214285714285714285714285714285714285714285714413, 248015873015873015873015873015873015873015873015967, 496031746031746031746031746031746031746031746031837, 744047619047619047619047619047619047619047619047718, 992063492063492063492063492063492063492063492063573, 1240079365079365079365079365079365079365079365079443, 1488095238095238095238095238095238095238095238095324]
N_Number = namedtuple("N_Number", "prefix suffix_len")
PREFIXES_SUM = 17460


def init_prefixes():
    assert_sg(True)


def digits_gen(n):
    """
    Yields number n digits in reverse sequence. For n = 342 sequence is 2, 4, 3
    :param n:
    :return:
    """
    while True:
        yield n % 10
        n //= 10
        if not n:
            break


def digits_sum(n):
    """ Return sum of digits n. """
    if isinstance(n, int):
        return sum([d for d in digits_gen(n)])
    elif isinstance(n, str):
        return sum([ord(d) - ord('0') for d in n])
    else:
        return sum([d for d in n.digits_gen()])


def f_value_with_digit_sum(n):
    """ Build the smallest number which digit sum is n. """
    n9, d = divmod(n, 9)
    if d == 0:
        return '9' * n9
    else:
        return chr(d+ord('0')) + '9' * n9


def reverse_f(f_value):
    """ Return number such that f(number) = f_value. """
    suffix_len, f_prefix = divmod(f_value, F9)
    prefix = PREFIX[f_prefix]
    return N_Number(prefix, suffix_len)


def f(n):
    """
    Define f(n) as the sum of the factorials of the digits of n.
    For example:
        f(342) = 3! + 4! + 2! = 32
    :param n: number
    :return: sum digits factorial of n
    """
    if isinstance(n, str):
        n = int(n)
    if isinstance(n, int):
        return sum([FACTORIALS[d] for d in digits_gen(n)])
    elif isinstance(n, list):
        return sum([FACTORIALS[d] for d in n])
    else:
        return sum([FACTORIALS[d] for d in n.digits_gen()])


def sf(n):
    """
    Compute sf(n) as the sum of the digits of f(n).
    Store in sf_cache the value n for which the reached the first time key sf(n)
    So:
    sf(144) = 4 + 9 = 13 as f(144) is 1!+4!+4! = 49
    For n = 144 is minimum n such that sf(n) = 13 so sf_cache[13] = 144
    :param n: number
    :return: sum digits of f(n)
    """
    sf_ = digits_sum(f(n))
    return sf_


def g(i):
    """
    Define g(i) to be the smallest positive integer n such that sf(n) == i.
    sf(342) = 5, also sf(25) = 5 and 25 is the smallest number giving sf(i) = 5, so g(5) = 25
    Using cached value. g_sequence with parameter not less than i must be called earlier
    :param i: number
    :return: the smallest n such that sf(n) == i in as N_Number tuple
    """
    f_value = f_value_with_digit_sum(i)
    best_n = reverse_f(int(f_value))
    return best_n


def sg(i):
    """
    Define  sg(i) as the sum of the digits of g(i).
    So sg(5) = 2 + 5 = 7 as g(5) = 25.
    :param i:
    :return: sum digits of g(i)
    """
    if i <= len(sg_table):
        return sg_table[i-1]
    else:
        n = g(i)
        return digits_sum(n.prefix) + n.suffix_len * 9


def g_suffix_len(i):
    f_value = f_value_with_digit_sum(i)
    return reverse_f(int(f_value)).suffix_len


def sum_sg_suffix_len(s, a, b, n, m):
    # print(f'{__name__}: n={n}, m={m}, \ns={s}, \na={a}, \nb={b}')
    am1sqr = (a - 1) * (a - 1)
    '''
    an = pow(a, n)
    p1 = b * (an - a * n + n - 1) // am1sqr
    p2 = s * (an - 1) //  (a - 1)
    r = (p1 + p2)
    '''
    # gcd_b_am1sqr = math.gcd(b, am1sqr)
    # b, am1sqr = b // gcd_b_am1sqr, am1sqr // gcd_b_am1sqr
    # gcd_m_am1 = math.gcd(m, (a-1))
    # pow_mod = m // gcd_m_am1sqr * am1sqr
    anmod = pow(a, n, m * am1sqr)
    q1 = b * (anmod - a * n + n - 1) // am1sqr
    q2 = s * (anmod - 1) // (a - 1)
    rq = (q1 + q2) % m
    return rq


def sum_sg_range(n, frames, steps, m):
    f_count = frames // 162
    '''
    if frames % 162:
        print("sum_sg_range called with frames not being multiple of 162")
    '''
    # s, a, b = ratio_between_sum_sg_suffix_len(n, frames, m)
    s, a, b = sum_param_table[n % 162], SUM_A, SUM_B
    suffix_part = sum_sg_suffix_len(s, a, b, steps, m) * 9
    prefix_part = steps * f_count * PREFIXES_SUM % m
    return (suffix_part + prefix_part) % m


def sum_sg_range_test(n, frames, steps, m):
    print(f'Range sum test from {n} up to {n + frames * steps} ({frames} * {steps})')
    s = sum_sg_range(n, frames, steps, m)
    t = 0
    for i in range(frames * steps):
        g_ = g(n + i)
        t += g_.suffix_len * 9 + digits_sum(g_.prefix)
    if s % m != t % m:
        print(f"Fail with computing sum sg - is vs expected: \n{s}\n{t}")


def sum_sg_mod_old(n, m):
    def verify_elem(val, i):
        """ Verify sg(i) elements build here against values in sg_table. """
        if i <= len(sg_table):
            if val % m != sg_table[i-1] % m:
                print(f"bad value for sg({i}. Expected {sg_table[i-1]}, received {val}")

    ''' 
    Split sg_table at position cache_limit.
        The first part used for setting up initial values of sg(i). Minimum 70 is required.
        The second part is used for verifying result of new get_sg against data in sg_table.
    '''
    cache_limit = min(len(sg_table), len(sg_table))
    s = 0
    s = sum(sg_table[:min(cache_limit, n)]) % m

    if cache_limit >= n:
        return s

    ''' Initialize n9_step, n9_sum, sg_n9_sum for i = cache_limit. '''
    f_value = f_value_with_digit_sum(cache_limit)
    nn = reverse_f(int(f_value))
    f_value_step = int(f_value[1:]) + 1
    n9_step = f_value_step // F9 % m
    n9_sum = n9_step * 9 % m
    sg_n9_sum = nn.suffix_len * 9 % m

    ''' Start compute from i = cache_limit + 1. '''
    for i in range(cache_limit + 1, n + 1):
        s = (s + sg(i)) % m
    return s


def sum_sg_mod(n, m):
    break_even = 500
    if n < break_even:
        return sum_sg_mod_old(n, m) % m
    else:
        frame = 162
        steps = (n + 1 - 162) // frame
        start = (n + 1 - steps * 162)
        s = sum_sg_mod_old(start-1, m) % m
        s += sum_sg_range(start, frame, steps, m)
        return s % m


def sum_sg(n):
    s = 0
    s = sum(sg_table[0:min(len(sg_table), n)])

    for i in range(len(sg_table) + 1, n + 1):
        s = (s + sg(i))
    return s


def assert_sg(cache=None):
    for i, sg_sum in enumerate(sg_table, 1):
        if sg_cache.get(i):
            if sg_cache.get(i) != sg_sum:
                print(f'Assertion error sg({i}) is {sg_cache.get(i, 0)} while expected {sg_sum}')
        else:
            if cache:
                sg_cache[i] = sg_sum


def hacker_main():
    init_prefixes()
    assert_sg(cache=True)
    q = int(input())
    for _ in range(q):
        n, m = map(int, input().split())
        r = sum_sg_mod(n, m)
        print(r)


def development_main(size=200, mod=None):
    pgm_start = time.perf_counter()
    init_prefixes()
    print(FACTORIALS)
    print(f'sg_table siize: {len(sg_table)}')
    print(f'PREFIXES_SUM: {PREFIXES_SUM}')
    pgm_stop = time.perf_counter()
    print(f"Init prefixes - {pgm_stop - pgm_start:.2f} seconds")
    if mod:
        total = sum_sg_mod(size, mod)
    else:
        total = sum_sg(size)
    pgm_stop = time.perf_counter()
    print(f"sum_sg({size}) has length {len(str(total))} last digits are {total % 1000000000000000} "
          f"computed in {pgm_stop - pgm_start:.2f} seconds")
    assert_sg()


if __name__ == "__main__":
    # DEBUG = True
    # hacker_main()
    # profile_main(50000000, 1000000000)
    development_main(10**50, 2**30-1)
    development_main(10**50, 10**18)
    exit()

"""

Initial release
sum_sg(500) has length 12 last digits are 412698459839 computed in 0.00 seconds
sum_sg(5000) has length 12 last digits are 269841780640 computed in 0.02 seconds
sum_sg(50000) has length 12 last digits are 984132135059 computed in 0.81 seconds
sum_sg(500000) has length 12 last digits are 412749963545 computed in 43.34 seconds

After introduce mod m arithmetic:
sum_sg(500000) has length 12 last digits are 412749963545 computed in 1.30 seconds
sum_sg(5000000) has length 12 last digits are 270356820724 computed in 6.22 seconds
sum_sg(50000000) has length 12 last digits are 989282535332 computed in 68.57 seconds

sum_sg(50000000) has length 12 last digits are 989282535332 computed in 1.81 seconds
sum_sg(500000000) has length 12 last digits are 464253963566 computed in 1.61 seconds
sum_sg(5000000000) has length 12 last digits are 785396820556 computed in 2.70 seconds

sum_sg(100000000000000000000000000000000000000000000000000) has length 18 
last digits are 380952380947918 computed in 0.00 seconds

"""

