"""
Problem 1 - Multiples of 3 and 5.

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
"""
import math
from itertools import takewhile


def multipler_in_range(stop):
    divisiors = {3, 5}
    d = (stop - 1) // 15
    s = (60 * d) + (d - 1) * d // 2 * 105
    start = (stop - 1) // 15 * 15 + 1
    for i in range(start, stop):
        for d in divisiors:
            if i % d == 0:
                s += i
                break
    return s



print(multipler_in_range(1000))


"""
Problem 2 - Even Fibonacci numbers.

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, 
the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.
"""


def Fibbonacci():
    yield 1
    yield 2
    i, j = 1, 2
    while True:
        i, j = j, i + j
        yield j


print(sum([n for n in takewhile(lambda x: x <= 4000000, Fibbonacci()) if n%2==0]))

"""
Problem 3 - Largest prime factor.

The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
"""
import sys
import math
def largest_prime_factor(n):
    def highest_divisior(num):
        p = num // 2
        for j in range(min(p + 1, num - 1), 1, -1):
            if num % j == 0:
                return j
        return num

    hd = highest_divisior (n)
    if hd == n:
        return n
    for i in range(hd, 1, -1):
        if n % i == 0:
            if highest_divisior(i) == i:
                return i
for i in range(10,30)    :
    print(i, largest_prime_factor(i))